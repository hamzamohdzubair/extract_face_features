#! /usr/bin/env python

import sys
import rospy
import roslib

import cv2
import dlib

from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

import face_detection_package.face_detection



class image_wrapper:

	def __init__(self):
		self.imageLandmarks = rospy.Publisher("face_landmarks", Image, queue_size=10)
		self.imageLandmarksNormalized256 = rospy.Publisher("face_landmarks_normalized_256", Image, queue_size=10)

		rospy.init_node('facial_landmarks', log_level=rospy.DEBUG)

		self.extractor = face_detection_package.face_detection.landmarks_extractor()

		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber("image_topic",Image, self.callback)
				

	def callback (self,data):
		try:
			cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
		except CvBridgeError as e:
			print(e)

		#TODO computing facial landmarks
		self.extractor.prepareImage (cv_image)
		self.extractor.extract()
		landMarksImage = self.extractor.getNormalizedLandmarksImageForFace(0)
	

		try:
			self.imageLandmarks.publish(self.bridge.cv2_to_imgmsg(landMarksImage, "bgr8"))
		except CvBridgeError as e:
			print(e)


def main(args):
	image_wrapper()

	try:
		rospy.spin()
	except KeyboardInterrupt:
		print("Shutting down")


if __name__ == '__main__':
	main(sys.argv)
